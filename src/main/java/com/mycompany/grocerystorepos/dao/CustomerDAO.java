/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.grocerystorepos.dao;

/**
 *
 * @author LENOVO
 */
import com.mycompany.grocerystorepos.model.Customer;
import java.sql.*;
import java.util.ArrayList;

import java.util.List;

public class CustomerDAO {

    private static final String DB_URL = "jdbc:sqlserver://localhost:1433;databaseName=QLBanHang1;encrypt=true;trustServerCertificate=true";
    private static final String USER = "sa";
    private static final String PASSWORD = "123";

    // L·∫•y danh s√°ch t·∫•t c·∫£ kh√°ch h√†ng t·ª´ b·∫£ng Customer
    public List<Customer> getAllCustomers() {
        List<Customer> customers = new ArrayList<>();
        String query = "SELECT * FROM Customer";

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                Customer customer = new Customer(
                        rs.getString("CustomerID"),
                        rs.getString("CustomerName"),
                        rs.getString("phone"),
                        rs.getString("email"),
                        rs.getString("point")
                );
                customers.add(customer);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return customers;
    }

    // Th√™m m·ªõi m·ªôt kh√°ch h√†ng v√†o b·∫£ng Customer
    public boolean addCustomer(Customer customer) {
        String checkQuery = "SELECT COUNT(*) FROM Customer WHERE CustomerID = ?";
        String insertQuery = "INSERT INTO Customer (CustomerID, CustomerName, phone, email, point) VALUES (?, ?, ?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD)) {
            conn.setAutoCommit(false); // üî• T·∫Øt AutoCommit
            // Ki·ªÉm tra ID c√≥ t·ªìn t·∫°i ch∆∞a
            try (PreparedStatement checkStmt = conn.prepareStatement(checkQuery)) {
                checkStmt.setString(1, customer.getId());
                ResultSet rs = checkStmt.executeQuery();
                if (rs.next() && rs.getInt(1) > 0) {
                    System.out.println("‚ùå ID ƒë√£ t·ªìn t·∫°i, kh√¥ng th·ªÉ th√™m!");
                    return false;
                }
            }

            // Th·ª±c hi·ªán th√™m n·∫øu ID ch∆∞a t·ªìn t·∫°i
            try (PreparedStatement pstmt = conn.prepareStatement(insertQuery)) {
                pstmt.setString(1, customer.getId());
                pstmt.setString(2, customer.getName());
                pstmt.setString(3, customer.getPhone());
                pstmt.setString(4, customer.getEmail());
                pstmt.setString(5, customer.getPoint());

                int rowsAffected = pstmt.executeUpdate();
                conn.commit();
                return rowsAffected > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng
    public boolean updateCustomer(Customer customer) {
        String query = "UPDATE Customer SET CustomerName = ?, phone = ?, email = ?, point = ? WHERE CustomerID = ?";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD); PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setString(1, customer.getName());
            pstmt.setString(2, customer.getPhone());
            pstmt.setString(3, customer.getEmail()); // ‚úÖ Th√™m email v√†o ƒë√∫ng v·ªã tr√≠
            pstmt.setString(4, customer.getPoint()); // ‚úÖ C·∫≠p nh·∫≠t ƒëi·ªÉm th∆∞·ªüng
            pstmt.setString(5, customer.getId());  // ‚úÖ ID ph·∫£i ·ªü v·ªã tr√≠ cu·ªëi

            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // X√≥a kh√°ch h√†ng theo CustomerID
    public boolean deleteCustomer(String customerId) {
        String query = "DELETE FROM Customer WHERE CustomerID = ?";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD); PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setString(1, customerId);
            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // L·∫•y th√¥ng tin kh√°ch h√†ng theo CustomerID
    public Customer getCustomerById(String customerId) {
        String query = "SELECT CustomerID, CustomerName, phone, email, point FROM Customer WHERE CustomerID = ?";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD); PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setString(1, customerId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return new Customer(
                        rs.getString("CustomerID"),
                        rs.getString("CustomerName"),
                        rs.getString("phone"),
                        rs.getString("email"), // ‚úÖ ƒê√£ th√™m ƒë√∫ng `email`
                        rs.getString("point") // ‚úÖ ƒê√£ s·ª≠a `point` th√†nh `point`
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

 public Customer searchCustomerByPhone(String phone) {
    Customer customer = null;
    String query = "SELECT CustomerID, CustomerName, phone, email, point FROM customer WHERE phone = ?";

    try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
         PreparedStatement pstmt = conn.prepareStatement(query)) {
        
        pstmt.setString(1, phone);  // Thi·∫øt l·∫≠p tham s·ªë cho c√¢u l·ªánh SQL
        ResultSet resultSet = pstmt.executeQuery();

        // N·∫øu t√¨m th·∫•y kh√°ch h√†ng
        if (resultSet.next()) {
            String customerId = resultSet.getString("CustomerID");
            String name = resultSet.getString("CustomerName");
            String email = resultSet.getString("email");
            String point = resultSet.getString("point");

            customer = new Customer(customerId, name, phone, email, point);
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }

    return customer;
}

}